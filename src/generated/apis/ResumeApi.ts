/* tslint:disable */
/* eslint-disable */
/**
 * Personal Site API
 * Public endpoints plus admin CRUD for posts, projects, testimonials, and contact moderation.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CertificateUpsertRequest,
  EducationUpsertRequest,
  HobbiesUpsertRequest,
  LanguageUpsertRequest,
  ProjectUpsertRequest,
  ResumeCertificateEntity,
  ResumeEducationEntity,
  ResumeHobbiesEntity,
  ResumeLanguageEntity,
  ResumeProjectEntity,
} from '../models/index';
import {
    CertificateUpsertRequestFromJSON,
    CertificateUpsertRequestToJSON,
    EducationUpsertRequestFromJSON,
    EducationUpsertRequestToJSON,
    HobbiesUpsertRequestFromJSON,
    HobbiesUpsertRequestToJSON,
    LanguageUpsertRequestFromJSON,
    LanguageUpsertRequestToJSON,
    ProjectUpsertRequestFromJSON,
    ProjectUpsertRequestToJSON,
    ResumeCertificateEntityFromJSON,
    ResumeCertificateEntityToJSON,
    ResumeEducationEntityFromJSON,
    ResumeEducationEntityToJSON,
    ResumeHobbiesEntityFromJSON,
    ResumeHobbiesEntityToJSON,
    ResumeLanguageEntityFromJSON,
    ResumeLanguageEntityToJSON,
    ResumeProjectEntityFromJSON,
    ResumeProjectEntityToJSON,
} from '../models/index';

export interface CreateCertificateRequest {
    certificateUpsertRequest: CertificateUpsertRequest;
}

export interface CreateEducationRequest {
    educationUpsertRequest: EducationUpsertRequest;
}

export interface CreateLanguageRequest {
    languageUpsertRequest: LanguageUpsertRequest;
}

export interface CreateProjectRequest {
    projectUpsertRequest: ProjectUpsertRequest;
}

export interface DeleteCertificateRequest {
    id: string;
}

export interface DeleteEducationRequest {
    id: string;
}

export interface DeleteLanguageRequest {
    id: string;
}

export interface DeleteProjectRequest {
    id: string;
}

export interface UpdateCertificateRequest {
    id: string;
    certificateUpsertRequest: CertificateUpsertRequest;
}

export interface UpdateEducationRequest {
    id: string;
    educationUpsertRequest: EducationUpsertRequest;
}

export interface UpdateLanguageRequest {
    id: string;
    languageUpsertRequest: LanguageUpsertRequest;
}

export interface UpdateProjectRequest {
    id: string;
    projectUpsertRequest: ProjectUpsertRequest;
}

export interface UpsertHobbiesRequest {
    hobbiesUpsertRequest: HobbiesUpsertRequest;
}

/**
 * 
 */
export class ResumeApi extends runtime.BaseAPI {

    /**
     * Create certificate
     */
    async createCertificateRaw(requestParameters: CreateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['certificateUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'certificateUpsertRequest',
                'Required parameter "certificateUpsertRequest" was null or undefined when calling createCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/certificates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateUpsertRequestToJSON(requestParameters['certificateUpsertRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create certificate
     */
    async createCertificate(requestParameters: CreateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create education
     */
    async createEducationRaw(requestParameters: CreateEducationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['educationUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'educationUpsertRequest',
                'Required parameter "educationUpsertRequest" was null or undefined when calling createEducation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/education`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EducationUpsertRequestToJSON(requestParameters['educationUpsertRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create education
     */
    async createEducation(requestParameters: CreateEducationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createEducationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create language
     */
    async createLanguageRaw(requestParameters: CreateLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['languageUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'languageUpsertRequest',
                'Required parameter "languageUpsertRequest" was null or undefined when calling createLanguage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/languages`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageUpsertRequestToJSON(requestParameters['languageUpsertRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create language
     */
    async createLanguage(requestParameters: CreateLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create resume project
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['projectUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'projectUpsertRequest',
                'Required parameter "projectUpsertRequest" was null or undefined when calling createProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/projects`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpsertRequestToJSON(requestParameters['projectUpsertRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create resume project
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete certificate
     */
    async deleteCertificateRaw(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/certificates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete certificate
     */
    async deleteCertificate(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Delete education
     */
    async deleteEducationRaw(requestParameters: DeleteEducationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteEducation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/education/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete education
     */
    async deleteEducation(requestParameters: DeleteEducationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEducationRaw(requestParameters, initOverrides);
    }

    /**
     * Delete language
     */
    async deleteLanguageRaw(requestParameters: DeleteLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteLanguage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/languages/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete language
     */
    async deleteLanguage(requestParameters: DeleteLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLanguageRaw(requestParameters, initOverrides);
    }

    /**
     * Delete resume project
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/projects/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete resume project
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectRaw(requestParameters, initOverrides);
    }

    /**
     * Get hobbies (public)
     */
    async getHobbiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResumeHobbiesEntity>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/resume/hobbies`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResumeHobbiesEntityFromJSON(jsonValue));
    }

    /**
     * Get hobbies (public)
     */
    async getHobbies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResumeHobbiesEntity> {
        const response = await this.getHobbiesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List certificates (public)
     */
    async listCertificatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResumeCertificateEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/resume/certificates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResumeCertificateEntityFromJSON));
    }

    /**
     * List certificates (public)
     */
    async listCertificates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResumeCertificateEntity>> {
        const response = await this.listCertificatesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List education (public)
     */
    async listEducationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResumeEducationEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/resume/education`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResumeEducationEntityFromJSON));
    }

    /**
     * List education (public)
     */
    async listEducation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResumeEducationEntity>> {
        const response = await this.listEducationRaw(initOverrides);
        return await response.value();
    }

    /**
     * List languages (public)
     */
    async listLanguagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResumeLanguageEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/resume/languages`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResumeLanguageEntityFromJSON));
    }

    /**
     * List languages (public)
     */
    async listLanguages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResumeLanguageEntity>> {
        const response = await this.listLanguagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List resume projects (public)
     */
    async listProjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResumeProjectEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/resume/projects`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResumeProjectEntityFromJSON));
    }

    /**
     * List resume projects (public)
     */
    async listProjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResumeProjectEntity>> {
        const response = await this.listProjectsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update certificate
     */
    async updateCertificateRaw(requestParameters: UpdateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateCertificate().'
            );
        }

        if (requestParameters['certificateUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'certificateUpsertRequest',
                'Required parameter "certificateUpsertRequest" was null or undefined when calling updateCertificate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/certificates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateUpsertRequestToJSON(requestParameters['certificateUpsertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update certificate
     */
    async updateCertificate(requestParameters: UpdateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Update education
     */
    async updateEducationRaw(requestParameters: UpdateEducationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateEducation().'
            );
        }

        if (requestParameters['educationUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'educationUpsertRequest',
                'Required parameter "educationUpsertRequest" was null or undefined when calling updateEducation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/education/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EducationUpsertRequestToJSON(requestParameters['educationUpsertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update education
     */
    async updateEducation(requestParameters: UpdateEducationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEducationRaw(requestParameters, initOverrides);
    }

    /**
     * Update language
     */
    async updateLanguageRaw(requestParameters: UpdateLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateLanguage().'
            );
        }

        if (requestParameters['languageUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'languageUpsertRequest',
                'Required parameter "languageUpsertRequest" was null or undefined when calling updateLanguage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/languages/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageUpsertRequestToJSON(requestParameters['languageUpsertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update language
     */
    async updateLanguage(requestParameters: UpdateLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateLanguageRaw(requestParameters, initOverrides);
    }

    /**
     * Update resume project
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProject().'
            );
        }

        if (requestParameters['projectUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'projectUpsertRequest',
                'Required parameter "projectUpsertRequest" was null or undefined when calling updateProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/projects/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpsertRequestToJSON(requestParameters['projectUpsertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update resume project
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProjectRaw(requestParameters, initOverrides);
    }

    /**
     * Upsert hobbies
     */
    async upsertHobbiesRaw(requestParameters: UpsertHobbiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['hobbiesUpsertRequest'] == null) {
            throw new runtime.RequiredError(
                'hobbiesUpsertRequest',
                'Required parameter "hobbiesUpsertRequest" was null or undefined when calling upsertHobbies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/resume/hobbies`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HobbiesUpsertRequestToJSON(requestParameters['hobbiesUpsertRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upsert hobbies
     */
    async upsertHobbies(requestParameters: UpsertHobbiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.upsertHobbiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
