/* tslint:disable */
/* eslint-disable */
/**
 * Personal Site API
 * Public endpoints plus admin CRUD for posts, projects, testimonials, and contact moderation.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContactRequest,
} from '../models/index';
import {
    ContactRequestFromJSON,
    ContactRequestToJSON,
} from '../models/index';

export interface SubmitRequest {
    contactRequest: ContactRequest;
    xForwardedFor?: string;
    xRealIP?: string;
}

/**
 * ContactControllerApi - interface
 * 
 * @export
 * @interface ContactControllerApiInterface
 */
export interface ContactControllerApiInterface {
    /**
     * 
     * @param {ContactRequest} contactRequest 
     * @param {string} [xForwardedFor] 
     * @param {string} [xRealIP] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactControllerApiInterface
     */
    submitRaw(requestParameters: SubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    submit(requestParameters: SubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ContactControllerApi extends runtime.BaseAPI implements ContactControllerApiInterface {

    /**
     */
    async submitRaw(requestParameters: SubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contactRequest'] == null) {
            throw new runtime.RequiredError(
                'contactRequest',
                'Required parameter "contactRequest" was null or undefined when calling submit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['X-Forwarded-For'] = String(requestParameters['xForwardedFor']);
        }

        if (requestParameters['xRealIP'] != null) {
            headerParameters['X-Real-IP'] = String(requestParameters['xRealIP']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/contact`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactRequestToJSON(requestParameters['contactRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async submit(requestParameters: SubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.submitRaw(requestParameters, initOverrides);
    }

}
