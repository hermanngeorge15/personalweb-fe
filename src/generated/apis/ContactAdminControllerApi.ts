/* tslint:disable */
/* eslint-disable */
/**
 * Personal Site API
 * Public endpoints plus admin CRUD for posts, projects, testimonials, and contact moderation.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { ContactMessageEntity } from '../models/index'
import {
  ContactMessageEntityFromJSON,
  ContactMessageEntityToJSON,
} from '../models/index'

export interface HandleRequest {
  id: string
}

export interface List4Request {
  handled?: boolean
}

/**
 * ContactAdminControllerApi - interface
 *
 * @export
 * @interface ContactAdminControllerApiInterface
 */
export interface ContactAdminControllerApiInterface {
  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactAdminControllerApiInterface
   */
  handleRaw(
    requestParameters: HandleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>

  /**
   */
  handle(
    requestParameters: HandleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>

  /**
   *
   * @param {boolean} [handled]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactAdminControllerApiInterface
   */
  list4Raw(
    requestParameters: List4Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ContactMessageEntity>>>

  /**
   */
  list4(
    requestParameters: List4Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ContactMessageEntity>>
}

/**
 *
 */
export class ContactAdminControllerApi
  extends runtime.BaseAPI
  implements ContactAdminControllerApiInterface
{
  /**
   */
  async handleRaw(
    requestParameters: HandleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling handle().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('bearer-jwt', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    let urlPath = `/api/contact/{id}:handle`
    urlPath = urlPath.replace(
      `{${'id'}}`,
      encodeURIComponent(String(requestParameters['id'])),
    )

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async handle(
    requestParameters: HandleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.handleRaw(requestParameters, initOverrides)
  }

  /**
   */
  async list4Raw(
    requestParameters: List4Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ContactMessageEntity>>> {
    const queryParameters: any = {}

    if (requestParameters['handled'] != null) {
      queryParameters['handled'] = requestParameters['handled']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('bearer-jwt', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    let urlPath = `/api/contact`

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ContactMessageEntityFromJSON),
    )
  }

  /**
   */
  async list4(
    requestParameters: List4Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ContactMessageEntity>> {
    const response = await this.list4Raw(requestParameters, initOverrides)
    return await response.value()
  }
}
