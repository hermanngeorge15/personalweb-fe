/* tslint:disable */
/* eslint-disable */
/**
 * Personal Site API
 * Public endpoints plus admin CRUD for posts, projects, testimonials, and contact moderation.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CertificateUpsertRequest
 */
export interface CertificateUpsertRequest {
    /**
     * 
     * @type {string}
     * @memberof CertificateUpsertRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateUpsertRequest
     */
    issuer?: string;
    /**
     * 
     * @type {Date}
     * @memberof CertificateUpsertRequest
     */
    from?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CertificateUpsertRequest
     */
    to?: Date;
    /**
     * 
     * @type {string}
     * @memberof CertificateUpsertRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateUpsertRequest
     */
    certificateId?: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateUpsertRequest
     */
    url?: string;
}

/**
 * Check if a given object implements the CertificateUpsertRequest interface.
 */
export function instanceOfCertificateUpsertRequest(value: object): value is CertificateUpsertRequest {
    return true;
}

export function CertificateUpsertRequestFromJSON(json: any): CertificateUpsertRequest {
    return CertificateUpsertRequestFromJSONTyped(json, false);
}

export function CertificateUpsertRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateUpsertRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'issuer': json['issuer'] == null ? undefined : json['issuer'],
        'from': json['from'] == null ? undefined : (new Date(json['from'])),
        'to': json['to'] == null ? undefined : (new Date(json['to'])),
        'description': json['description'] == null ? undefined : json['description'],
        'certificateId': json['certificateId'] == null ? undefined : json['certificateId'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function CertificateUpsertRequestToJSON(json: any): CertificateUpsertRequest {
    return CertificateUpsertRequestToJSONTyped(json, false);
}

export function CertificateUpsertRequestToJSONTyped(value?: CertificateUpsertRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'issuer': value['issuer'],
        'from': value['from'] == null ? undefined : ((value['from']).toISOString()),
        'to': value['to'] == null ? undefined : ((value['to']).toISOString()),
        'description': value['description'],
        'certificateId': value['certificateId'],
        'url': value['url'],
    };
}

